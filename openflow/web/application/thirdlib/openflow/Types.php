<?php
namespace openflow;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class job_info {
  static $_TSPEC;

  /**
   * @var int
   */
  public $job_id = null;
  /**
   * @var string
   */
  public $job_name = null;
  /**
   * @var string
   */
  public $xml_desc = null;
  /**
   * @var string
   */
  public $time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'job_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'job_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'xml_desc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['job_name'])) {
        $this->job_name = $vals['job_name'];
      }
      if (isset($vals['xml_desc'])) {
        $this->xml_desc = $vals['xml_desc'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
    }
  }

  public function getName() {
    return 'job_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->job_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->xml_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('job_info');
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::I32, 1);
      $xfer += $output->writeI32($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->job_name !== null) {
      $xfer += $output->writeFieldBegin('job_name', TType::STRING, 2);
      $xfer += $output->writeString($this->job_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xml_desc !== null) {
      $xfer += $output->writeFieldBegin('xml_desc', TType::STRING, 3);
      $xfer += $output->writeString($this->xml_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 4);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class task_info {
  static $_TSPEC;

  /**
   * @var int
   */
  public $task_id = null;
  /**
   * @var string
   */
  public $task_name = null;
  /**
   * @var string
   */
  public $cmd = null;
  /**
   * @var string
   */
  public $nodes = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cmd',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'nodes',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_id'])) {
        $this->task_id = $vals['task_id'];
      }
      if (isset($vals['task_name'])) {
        $this->task_name = $vals['task_name'];
      }
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['nodes'])) {
        $this->nodes = $vals['nodes'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'task_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('task_info');
    if ($this->task_id !== null) {
      $xfer += $output->writeFieldBegin('task_id', TType::I32, 1);
      $xfer += $output->writeI32($this->task_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_name !== null) {
      $xfer += $output->writeFieldBegin('task_name', TType::STRING, 2);
      $xfer += $output->writeString($this->task_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::STRING, 3);
      $xfer += $output->writeString($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodes !== null) {
      $xfer += $output->writeFieldBegin('nodes', TType::STRING, 4);
      $xfer += $output->writeString($this->nodes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 6);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class agent_state {
  static $_TSPEC;

  /**
   * @var string
   */
  public $remain_mem = null;
  /**
   * @var string
   */
  public $mem_use_percent = null;
  /**
   * @var string
   */
  public $cpu_idle_percent = null;
  /**
   * @var string
   */
  public $cpu_load = null;
  /**
   * @var string
   */
  public $ipaddr = null;
  /**
   * @var string
   */
  public $swap_use_percent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'remain_mem',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mem_use_percent',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cpu_idle_percent',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cpu_load',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ipaddr',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'swap_use_percent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['remain_mem'])) {
        $this->remain_mem = $vals['remain_mem'];
      }
      if (isset($vals['mem_use_percent'])) {
        $this->mem_use_percent = $vals['mem_use_percent'];
      }
      if (isset($vals['cpu_idle_percent'])) {
        $this->cpu_idle_percent = $vals['cpu_idle_percent'];
      }
      if (isset($vals['cpu_load'])) {
        $this->cpu_load = $vals['cpu_load'];
      }
      if (isset($vals['ipaddr'])) {
        $this->ipaddr = $vals['ipaddr'];
      }
      if (isset($vals['swap_use_percent'])) {
        $this->swap_use_percent = $vals['swap_use_percent'];
      }
    }
  }

  public function getName() {
    return 'agent_state';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remain_mem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mem_use_percent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cpu_idle_percent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cpu_load);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ipaddr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->swap_use_percent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('agent_state');
    if ($this->remain_mem !== null) {
      $xfer += $output->writeFieldBegin('remain_mem', TType::STRING, 1);
      $xfer += $output->writeString($this->remain_mem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mem_use_percent !== null) {
      $xfer += $output->writeFieldBegin('mem_use_percent', TType::STRING, 2);
      $xfer += $output->writeString($this->mem_use_percent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpu_idle_percent !== null) {
      $xfer += $output->writeFieldBegin('cpu_idle_percent', TType::STRING, 3);
      $xfer += $output->writeString($this->cpu_idle_percent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpu_load !== null) {
      $xfer += $output->writeFieldBegin('cpu_load', TType::STRING, 4);
      $xfer += $output->writeString($this->cpu_load);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipaddr !== null) {
      $xfer += $output->writeFieldBegin('ipaddr', TType::STRING, 5);
      $xfer += $output->writeString($this->ipaddr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->swap_use_percent !== null) {
      $xfer += $output->writeFieldBegin('swap_use_percent', TType::STRING, 6);
      $xfer += $output->writeString($this->swap_use_percent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class task_state {
  static $_TSPEC;

  /**
   * @var int
   */
  public $job_id = null;
  /**
   * @var int
   */
  public $task_id = null;
  /**
   * @var int
   */
  public $task_status = null;
  /**
   * @var string
   */
  public $task_result = null;
  /**
   * @var string
   */
  public $ipaddr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'job_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'task_status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'task_result',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ipaddr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['job_id'])) {
        $this->job_id = $vals['job_id'];
      }
      if (isset($vals['task_id'])) {
        $this->task_id = $vals['task_id'];
      }
      if (isset($vals['task_status'])) {
        $this->task_status = $vals['task_status'];
      }
      if (isset($vals['task_result'])) {
        $this->task_result = $vals['task_result'];
      }
      if (isset($vals['ipaddr'])) {
        $this->ipaddr = $vals['ipaddr'];
      }
    }
  }

  public function getName() {
    return 'task_state';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ipaddr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('task_state');
    if ($this->job_id !== null) {
      $xfer += $output->writeFieldBegin('job_id', TType::I32, 1);
      $xfer += $output->writeI32($this->job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_id !== null) {
      $xfer += $output->writeFieldBegin('task_id', TType::I32, 2);
      $xfer += $output->writeI32($this->task_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_status !== null) {
      $xfer += $output->writeFieldBegin('task_status', TType::I32, 3);
      $xfer += $output->writeI32($this->task_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_result !== null) {
      $xfer += $output->writeFieldBegin('task_result', TType::STRING, 4);
      $xfer += $output->writeString($this->task_result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipaddr !== null) {
      $xfer += $output->writeFieldBegin('ipaddr', TType::STRING, 5);
      $xfer += $output->writeString($this->ipaddr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class execute_jobinfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $current_jobnum = null;
  /**
   * @var int
   */
  public $done_jobnum = null;
  /**
   * @var int
   */
  public $failure_jobnum = null;
  /**
   * @var int
   */
  public $success_jobnum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'current_jobnum',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'done_jobnum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'failure_jobnum',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'success_jobnum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['current_jobnum'])) {
        $this->current_jobnum = $vals['current_jobnum'];
      }
      if (isset($vals['done_jobnum'])) {
        $this->done_jobnum = $vals['done_jobnum'];
      }
      if (isset($vals['failure_jobnum'])) {
        $this->failure_jobnum = $vals['failure_jobnum'];
      }
      if (isset($vals['success_jobnum'])) {
        $this->success_jobnum = $vals['success_jobnum'];
      }
    }
  }

  public function getName() {
    return 'execute_jobinfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->current_jobnum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->done_jobnum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->failure_jobnum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success_jobnum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('execute_jobinfo');
    if ($this->current_jobnum !== null) {
      $xfer += $output->writeFieldBegin('current_jobnum', TType::I32, 1);
      $xfer += $output->writeI32($this->current_jobnum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->done_jobnum !== null) {
      $xfer += $output->writeFieldBegin('done_jobnum', TType::I32, 2);
      $xfer += $output->writeI32($this->done_jobnum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failure_jobnum !== null) {
      $xfer += $output->writeFieldBegin('failure_jobnum', TType::I32, 3);
      $xfer += $output->writeI32($this->failure_jobnum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success_jobnum !== null) {
      $xfer += $output->writeFieldBegin('success_jobnum', TType::I32, 4);
      $xfer += $output->writeI32($this->success_jobnum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


